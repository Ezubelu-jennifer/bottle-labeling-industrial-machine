#include <Wire.h>  // including wire library for easy of communication
#include <Adafruit_GFX.h> // for LED Graphic display
#include <Adafruit_SSD1306.h> // for LED library
#include <EEPROM.h> // to make use of the Arduino EEPROM
#include <Keypad.h> //for KEYPAD library

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);// to initialise the LED module

// defining variables for writing and reading the EEPROM
volatile long int prev_count;
byte cleared = 0;
unsigned long int addr =50;
unsigned long int counts;

//defining the variables to carry or store the data 
char new_pass[4], user_input_pass[4], eeprom_pass[4];
char user_input_pass1[4];
char user_input_pass2[5];
char user_input_pass3[5];
char eeprom_pass1[5];
char new_pass1[5];

char key_pass;
char key_pass1;
char key_def;
char key_def1;
char default_pass[4] = "5555";//he defaul password here
char default_pass1[5] = "55660";//he defaul password here

const byte ROWS = 4; // rows for keypad
const byte COLS = 4; // columns for keypad

//define the symbols on the buttons of the keypads
char hexaKeys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {3, 2, 52, 8}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {7, 6, 5, 4}; //connect to the column pinouts of the keypad

//initialize an instance of class NewKeypad
Keypad customKeypad = Keypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); 

//conveyor belt speed controller variables
int speedAdjuster = A2;
int paperAdjuster = A3;

int i = 0;
int k = 0;
bool workstate = false;
//proximity and paper sensor pins, this pins reads in sensors values into the aarduino
int papersen = A1; 
int proxsen = A0;

int outpaper = 12; //output pin for the paper sensor
int enable =11; // stepper motor enable pin
int dirPin =10; // stepper motor directional pin 
int basebias = 14;// this pin is use to bias the transisitors that control the relays
unsigned long count = 0;

//it will flag true if the password is correct
bool pass = false;
bool pass1 = false;

//to control when the sensors have senses a bottle or not
bool statepa = true;
bool statepro = false;
bool prev_state = false;

//container variables for the sensor data
int val;
int val1;

unsigned long starttime;
unsigned long currenttime;

bool paperMotorRotated = false;

volatile int paperHead =10;
volatile int paperMover = 1;
bool moves = false;
int previousPaperHead = 0;
bool pulseRequired=false;

bool startCommand = false;
bool stopCommand = false;
String blueData = " "; // string to hold data the will be send from the bluetooth
String ordinaryCommand = " "; // to  hold commands
unsigned long bluetoothTime = 0; // Initialize to 0 or any specific start time
unsigned long workdoneTimeReset = 0;


void workdone(){
while(workstate==true){
  //starttime = currenttime;
  int shows = EEPROM.get(addr,count); // get the count value store in the addr
  //serial printing and LED display for the workdone
  Serial.println(currenttime);
  Serial.println(shows);

  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0,0);
  display.print("currenttime: ");
  display.setCursor(0,10);
  display.print(currenttime);
  //delay(5000);
  display.setTextSize(1);
  display.setCursor(0,18);
  display.print("workdone:");
  display.setCursor(0,25);
  display.print(shows);
  display.display();
  //delay(100);
  workstate = false;
 }
}

void keypadfun(){
  // this function provide a space where users put in their passwords and it also privide the logic of checking if the password is correct or not.
 display.clearDisplay();
 display.setTextSize(1);
 display.setCursor(0,0);
 display.print("Enter the password: ");
 display.display();
   
 Serial.print("Enter The Password:");
   while (i < 4)
   {
     key_pass = customKeypad.getKey();
     if (key_pass)   
     {
       user_input_pass1[i++]= key_pass;
       Serial.print(key_pass);
       display.setTextSize(1);
       display.setCursor(10,10);
       display.print(user_input_pass1);
       display.display();
     }
     key_pass = 0;
       }
         
   if (i == 4)
   {
     delay(100);
     for (int j = 0; j < 4; j++)
       eeprom_pass[j] = EEPROM.read(j);
     if (!(strncmp(user_input_pass1,eeprom_pass, 4)))
     {
       Serial.println();
       Serial.println("Password  Accepted");
       display.setTextSize(1);
       display.setCursor(10,20);
       display.print("Accepted");
       display.display();
       pass = true;
           
     }
     else
     {
       Serial.println();
       Serial.println("Wrong Password...");
       display.setTextSize(1);
       display.setCursor(10,20);
       display.print("wrong password");
       display.display();
       pass = false;
     }
   i = 0;
   }
}

void keypadfunadmin(){
    // this function provide a space where admin put in their passwords and it also privide the logic of checking if the password is correct or not.
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0,0);
  display.print("Enter the Admin password: ");
  display.display();
   
  Serial.print("Enter The Admin Password:");
  while (i < 5)
    {
    key_pass1 = customKeypad.getKey();
    if (key_pass1)
      {
      user_input_pass2[i++]= key_pass1;
      Serial.print(key_pass1);
      display.setTextSize(1);
      display.setCursor(10,10);
      display.print(user_input_pass2);
      display.display();
      }
    key_pass1 = 0;
  }
  if (i == 5)
  {
   delay(100);
   for (int r = 0; r < 5; r++)
    eeprom_pass1[r] = EEPROM.read(r+6);
    if (!(strncmp(user_input_pass2,eeprom_pass1, 5)))
    {
      Serial.println();
      Serial.println("Password  Accepted");
      display.setTextSize(1);
      display.setCursor(10,20);
      display.print("Accepted");
      display.display();
      pass1 = true;
          
    }
    else
    {
     Serial.println();
     Serial.println("Wrong Password...");
     display.setTextSize(1);
     display.setCursor(10,20);
     display.print("wrong password");
     pass1 = false;
     display.display();
    }
  i = 0;
  }   
}

void changeadmin(){
  //this function allows admin to change their password by providing its default password.
  display.clearDisplay();
  int j = 0;
  Serial.println("Enter your default password: ");
  display.setTextSize(1);
  display.setCursor(0,10);
  display.print("Enter your default password: ");
  display.display();
  while(j<5)
  {
    char key1 = customKeypad.getKey();
    if (key1)
    {
      user_input_pass3[j++] = key1;
      Serial.print(key1);
      
      display.setTextSize(1);
      display.setCursor(0,18);
      display.print(user_input_pass3);
      display.display();
    }
    key1 = 0;
  }
  delay(100);
  if ((strncmp(user_input_pass3,default_pass1,5))){
    Serial.println("wrong password");
    
    display.setTextSize(1);
    display.setCursor(0,24);
    display.print("wrong password");
    display.display();
    
    delay(100);
    key_def1 = 0;
  }
  else
  {
    display.clearDisplay();
    k = 0;
    Serial.println();
    Serial.println("Enter new password: ");

    display.setTextSize(1);
    display.setCursor(0,0);
    display.print("Enter new password: ");
    display.display();
    
    while(k<5)
    {
      char key = customKeypad.getKey();
      if (key)
      {
        new_pass1[k] = key;
         Serial.print(key);
        EEPROM.write(k+6,new_pass1[k]);
        k++;

      display.setTextSize(1);
      display.setCursor(0,10);
     display.print(new_pass1);
      display.display();
      }
    }
    Serial.println();
    Serial.println("password updated");
    pass1 = true;

    display.setTextSize(1);
    display.setCursor(0,20);
    display.print("password updated");
    display.display();
    delay(100);
  }
}
 
void change(){
  // this function provide a space for users to change their password by providing their default password.
  display.clearDisplay();
  int j = 0;
  Serial.println("Enter your password: ");
  
  display.setTextSize(1);
  display.setCursor(0,10);
  display.print("Enter your default password: ");
  display.display();
  while(j<4)
  {
    char key = customKeypad.getKey();
    if (key)
    {
      user_input_pass[j++] = key;
      Serial.print(key);
      
      display.setTextSize(1);
      display.setCursor(0,18);
      display.print(user_input_pass);
      display.display();
    }
    key = 0;
  }
  delay(100);
  if ((strncmp(user_input_pass,default_pass,4))){
    Serial.println("wrong password");
  
    display.setTextSize(1);
    display.setCursor(0,24);
    display.print("wrong password");
    display.display();
    
    delay(100);
    key_def = 0;
  }
  else
  {
    display.clearDisplay();
    j = 0;
    Serial.println();
    Serial.println("Enter new password: ");

    display.setTextSize(1);
    display.setCursor(0,0);
    display.print("Enter new password: ");
    display.display();
    
    while(j<4)
    {
      char key = customKeypad.getKey();
      if (key)
      {
        new_pass[j] = key;
        Serial.print(key);

        EEPROM.write(j,new_pass[j]);
        j++;

      display.setTextSize(1);
      display.setCursor(0,10);
      display.print(new_pass);
      display.display();
      }
    }
    Serial.println();
    Serial.println("password updated");

    display.setTextSize(1);
    display.setCursor(0,20);
    display.print("password updated");
    display.display();
    delay(100);
    pass = true;
  }
  
}


void bottlecount() {
  EEPROM.write(addr, cleared);  // Write the cleared state to EEPROM

  bool current_state = iscountpro();  // Read the current state of the sensor/input
  
  // Check for state change from LOW to HIGH (or HIGH to LOW depending on your sensor)
  if (current_state != prev_state && current_state == true) {
    count++;  // Increment the count by one
    EEPROM.put(addr, count);  // Store the updated count in EEPROM
    prev_state = current_state;  // Update the previous state
  }

  // Update the previous state when the state has not changed to avoid double counting
  if (current_state == prev_state) {
    prev_state = current_state;
  }
}

bool iscountpro(){
  //this function reads in the proximity sensor values and its threshold was use to flag the boolean codition
  val1 = analogRead(proxsen);
  
  if (val1 <= 200){
    statepro = true;
    
  }else{
    statepro = false;
  }
  return statepro;
}

bool iscountpa(){
    //this function reads in the paper sensor values and its threshold was use to flag the boolean coditions
  val = analogRead(papersen);
  if(val <= 100){ // it was greater than before
    statepa = true;
  }else{
    statepa = false;
  }
  return statepa;
}

void setup() {
  Serial.begin(9600);// for serial communication
  Serial1.begin(9600);// for hardware tx and rx communication

  //initialising the LED module and making sure that it work before any other thing else
 if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  
display.setTextColor(WHITE);

//other pins setups
 pinMode(papersen,INPUT_PULLUP);
 pinMode(proxsen,INPUT_PULLUP);
 pinMode(speedAdjuster,INPUT_PULLUP);
 pinMode(paperAdjuster,INPUT_PULLUP);
 
 pinMode(outpaper,OUTPUT);
 pinMode(enable,OUTPUT);
 pinMode(dirPin,OUTPUT);
 pinMode(basebias,OUTPUT);
 digitalWrite(basebias,LOW);

 
  Serial.println("Press A to Compare Password\nPress B to Change Password\nPress D for admin use\npress C for self check\n press * for another option");
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0,0);
  display.print("A- Password");
  display.setCursor(0,6);//(0,7)
  display.print("B- change password");
  display.setCursor(0,12);//(0,15)
  display.print("D- Admin only ");
  display.setCursor(0,19); //(0,24)
  display.print("C- self check");
  display.setCursor(0, 25);//(0,32)
  display.print("*- Other option");
  display.display();
  delay(20);
 
}

//calibration menu
void calibrateOption(){
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0,0);
  display.print("#- Calibrate Paper");
  display.setCursor(0,7);
  display.print("0- change admin password");
  
  display.display();
 
}

//calibration function
void calibrate() {
    while (true) {
        // Read values from variable resistors
        int speed1 = analogRead(speedAdjuster);
        int paperspeed = analogRead(paperAdjuster);
        
        // Map the analog values to desired ranges
        int speed = map(speed1, 0, 1023, 0, 200);
        int mover = map(paperspeed, 0, 1023, 0, 100);

        // Update the values for paperHead and paperMover
        paperHead = speed;
        paperMover = mover;

        // Display the current settings
        display.clearDisplay();
        display.setTextSize(1);
        display.setCursor(0, 0);
        display.print("DelayTime:");
        display.setCursor(0, 8);
        display.print(paperMover);

        display.setCursor(0, 16);
        display.print("PaperHead:");
        display.setCursor(0, 24);
        display.print(paperHead);
        display.display();

        Serial.print("DelayTime: ");
        Serial.print(paperMover);
        Serial.print(" | PaperHead: ");
        Serial.println(paperHead);

        // Wait for user to confirm the values with a specific key
        char key = customKeypad.getKey();
        if (key == 'C') { // Confirm with 'C' key
            display.clearDisplay();
            display.setCursor(0, 0);
            display.print("Values confirmed");
            display.display();
            delay(2000);
            digitalWrite(enable, LOW);
            handlePaperMovement(paperHead);
            return; // Exit the calibration loop
        }

        delay(100); // Add a small delay to reduce display flicker
    }
}

void handlePaperMovement(int currentPaperHead) {
  // Check if paperHead value has changed
  if (currentPaperHead != previousPaperHead && !pulseRequired) {
     digitalWrite(enable, LOW);
    //if (!pulseRequired) { // Check if pulse is required
    movePaper(); // Pulse out paper pin
    pulseRequired = true; // Set the flag to indicate pulse occurred
   // }
    previousPaperHead = currentPaperHead; // Update previousPaperHead to current value
  } else {
    pulseRequired = false; // Reset the flag if paperHead value is unchanged
    digitalWrite(enable, HIGH);  // Disable the motor after paper movement
  }
}

void checkList(){
//machine parts working condition menu
    Serial.println("Press 1 for conveyor motor checking\nPress 2 for sensor output display\nPress 3 for paper motor checking\n");
    //test = true;
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(0,0);
    display.print("1-conveyor motor");
    display.setCursor(0,7);
    display.print("2-sensor display");
    display.setCursor(0,15);
    display.print("3-paper motor");
    display.setCursor(0,25);
    display.print("4-enter password");
    display.display();    
}

void movePaper() {
  // Adjust the following values based on your specific motor and paper handling mechanism
  const int STEP_DELAY = 50; 
  const int paperMoveSteps = 2; //it can change automatically

  digitalWrite(dirPin, HIGH);  // Set the direction of paper movement (adjust based on your setup)
  digitalWrite(enable, LOW);    // Enable the motor

  for (int i = 0; i < paperMoveSteps; i++) {
    digitalWrite(outpaper, HIGH);
    delayMicroseconds(STEP_DELAY + paperHead);  // Adjust delay based on your requirements
    digitalWrite(outpaper, LOW);
    delayMicroseconds(STEP_DELAY + paperHead);  //50 microsecond was used before;
  }
}

void loop(){
 currenttime = millis();// get time the machine start running and it is the clock for this whole system  
 
 char key = customKeypad.getKey(); // Read the pressed key

  if (key) { // from the setup menu get the key the user is going the press and use switch statement to place the user request to the written function for it
    switch (key) {
     case 'A':
      moves = false;
      keypadfun();
      break;

     case 'B':
     display.clearDisplay();
     display.setTextSize(1);
     display.setCursor(0,0);
     display.print("change your password");
     display.display();
     Serial.println("change your password: ");
     
     change();
     break;

     case 'C':
     checkList();
     break;

     case 'D':
     keypadfunadmin();
     break;

     case '*':
     calibrateOption();
     break;
     // # and 0 cases are under calibrate option
     case '#':
     //moves = true;
     calibrate();
     break;

     case '0':
     display.clearDisplay();
     display.setTextSize(1);
     display.setCursor(0,0);
     display.print("change your admin password: ");
     display.display();
      
     Serial.println("change your admin password: ");
     
     changeadmin();
     break;

     case '1':
     digitalWrite(basebias,HIGH);
     break;

     case '2':
     digitalWrite(basebias,LOW);
     val1 = analogRead(proxsen);
     val = analogRead(papersen);
     if (val1 <= 200){
     display.clearDisplay();
     display.setTextSize(1);
     display.setCursor(0,0);
     display.print("proximity sensor is");
     display.setCursor(0,10);
     display.print("working");
     display.setCursor(0,20);
     display.print("press 4 to go back");
     display.display();
     }
     if (val < 1000){
     display.clearDisplay();
     display.setTextSize(1);
     display.setCursor(0,0);
     display.print("paper sensor");
     display.setCursor(0,10);
     display.print("working");
     display.setCursor(0,20);
     display.print("press 4 to go back");
     display.display();
     }
     break;

     case '3':
     digitalWrite(enable,LOW);
     digitalWrite(outpaper,HIGH);
     delay(1);
     digitalWrite(outpaper,LOW);
     delay(1);
     break;
    
     case '4':
     //setup();
     checkList();
     break;

     }
  }

  //for bluetooth sending data

 String bluesendData = "Proximity sensor status: " + String(val1) + "\n" +
                       "Paper sensor status: " + String(val)  + "\n" +
                       "Conveyor Motor: " + (basebias? "ON" : "OFF")  + "\n" +
                       "Label Motor: " + (outpaper ? "ON" : "OFF")+ "\n"+
                        "Work done: "+ String(count);


  if (Serial1.available()){ // check if there is a data at the serial1 line. then check if the data is equal to start or stop so that the conveyor motor can start by triggering the biasbase pin
    String blueData = Serial1.readString();
    blueData.trim();  // Remove any leading or trailing whitespace
    
    Serial.println(blueData);
    if(blueData == "start"){
    startCommand = true;
    stopCommand = false;
    Serial.println(startCommand);
    } else if(blueData == "stop"){
      stopCommand = true;
      startCommand = false; // Reset startCommand if stop is received
    }
    else{
    startCommand = false;
    stopCommand = false;
    ordinaryCommand = blueData;
    //Serial.println(blueData); 
  }
  delay(10);
}

// control the time for the sending of the data via bluetooth
if (millis() - bluetoothTime >= 15000) {//60000
      Serial1.println(bluesendData);
      bluetoothTime = millis(); // Update the timestamp}
      }
if (millis() - workdoneTimeReset >= 20000000) {//60000 a day calculation is 86,400,000
      count = 0;
      workdoneTimeReset = millis(); // Update the timestamp}
      }

if(stopCommand == true){
      startCommand = false; // Reset startCommand if stop is received
      digitalWrite(enable,HIGH);
      digitalWrite(outpaper, LOW);
      digitalWrite(dirPin,LOW);
      digitalWrite(basebias,LOW);

     //stopCommand = false;
     }

 if(pass || startCommand == true){ // check if the user is operating the machine from the password side or from the bluetooth side
    digitalWrite(dirPin,HIGH);//turn on the stepper motor
    digitalWrite(basebias,HIGH);// turn on the conveyor motor

    if((iscountpro())){ // check if there is a bottle or not
      
      digitalWrite(enable,LOW);
      digitalWrite(outpaper, HIGH);
      //delay(1);  
      delayMicroseconds(1);
      digitalWrite(outpaper, LOW);
      //delay(1); 
      delayMicroseconds(1); 
      paperMotorRotated=false;
      bottlecount(); 
      movePaper();
     
    }
    else if(!iscountpa()){
      
      //digitalWrite(enable,HIGH);
    
     //if(!paperMotorRotated){
      //digitalWrite(enable, LOW);
      // movePaper();
      //Serial.println("in here");
    
     //paperMotorRotated=true;
    //} 
  }
  
    else{
        
     digitalWrite(outpaper,LOW);
     digitalWrite(enable,HIGH);
       
       //paperMotorRotated = false;
     display.clearDisplay();
     display.setTextSize(1);
     display.setCursor(1,0);
     display.print("counts: ");
     display.setTextSize(1);
     display.setCursor(20,20);
     counts = EEPROM.get(addr,count);
     display.print(counts);
     display.display();
     //workstate=true;
     //workdone();  //   
     //delay(1000);
    } 

 }
 
if(pass1){
  
   if((iscountpro())&&(iscountpa())){
      digitalWrite(enable,LOW);
    
      digitalWrite(outpaper,HIGH);
      delay(2);
      digitalWrite(outpaper,LOW);
      delay(1);
 }  else{
       digitalWrite(outpaper,LOW);
      
 }
}

}
